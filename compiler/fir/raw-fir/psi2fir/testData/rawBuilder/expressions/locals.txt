FILE: locals.kt
    public? final? fun withLocals([IsConstructorParameter=false] p: Int): Int {
        local final? class Local : R|kotlin/Any| {
            public? [ContainingClassKey=Local] constructor([IsConstructorParameter=true] pp: Int): R|Local| {
                super<R|kotlin/Any|>()
            }

            public? final? [IsFromVarargKey=false] val pp: Int = R|<local>/pp|
                public? get(): Int

            public? final? fun diff(): <implicit> {
                ^diff pp#.minus#(p#)
            }

        }

        lval x: <implicit> = Local#(IntegerLiteral(42)).diff#()
        local final? fun sum([IsConstructorParameter=false] y: Int, [IsConstructorParameter=false] z: Int, [IsConstructorParameter=false] f: ( ([IsConstructorParameter=false] Int, [IsConstructorParameter=false] Int) -> Int )): Int {
            ^sum x#.plus#(f#(y#.plus#(z#)))
        }

        lval code: <implicit> = object : Any {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<Any>()
            }

            public? final? fun foo(): <implicit> {
                ^foo hashCode#()
            }

        }
        .foo#()
        ^withLocals sum#(code#, Local#(IntegerLiteral(1)).diff#(), fun <anonymous>([IsConstructorParameter=false] x: Int, [IsConstructorParameter=false] y: Int): <implicit> {
            ^ x#.plus#(y#)
        }
        )
    }
